I) La reussite des alliances: structuration du jeu
b) Créations des fonctions

	Pour représenter informatiquement le jeu de la réussite des alliances, nous avions à notre disposition une partie guidée intégrée au sujet.
Ce "cahier des charges" détaillé nous a fourni un certain confort quant à l'architecture du programme en lui même. En effet, comme les entrées, 
sorties et effets de bords de nos fonctions nous étaient déjà indiqué, nous n'avions pas à réflechir à comment nos fonctions allaient intéragir entre
elles. Les appels à des fonctions entérieures, s'il en avait, nous étaient eux aussi indiqués ou tout du moins suggérés. Cette souplesse de travail nous
a permis de nous concentrer sur l'algorithmie de nos fonctions et comment optimiser ces dernières.
	Néanmoins, le sujet nous permettait également de prendre certaines libertés. Par exemple, il nous était suggéré de réaliser des fonctions
auxiliaires pour programmer la fonction "une_etape_reussite". C'est ce que nous avons fait avec la fonction "piocher" qui compartimente l'action de 
piocher une carte. Elle prends en argument deux listes, une qui représente la liste des tas de la réussite, l'autre qui représente la pioche. Elle a 
pour effet de bord de déplacer la première carte de la pioche (c'est à dire d'indice 0) au dernier emplacement de la liste des tas. Pour cela, nous 
avons utilisé la fonction "pop" qui a elle même pour effet de bord de supprimer un élément d'une liste à un index précis et qui retourne cet élément.
Nous avons donc redirigé la sortie de la fonction "pop" comme ceci:

					===================== Code de la fonction "piocher" (l.121) =====================
 
Nous n'avons cependant pas jugé nécéssaire de faire d'autres compartimentations pour fluidifier cette fonction.
	La fonction "reussite_mode_manuel" nous a permis à nouveau de pouvoir prendre des libertés cette fois-ci quant à l'affichage des éléments et
plus globalement l'interface utilisateur. Pour rappel, cette fonction a pour but de laisser l'utilisateur jouer une partie. Ceci néséssite une interface
pour que l'utilisateur puisse choisir ce qu'il veut faire. Ainsi, afin de présenter au mieux ses options de jeu à l'utilisateur, nous avons réaliser un
menu contenant un choix pour piocher, un choix pour réaliser un saut et un choix pour mettre fin à la partie. En plus de ce menu, nous avons décider de
réaliser un affichage de la réussite plus poussé permettant de relier chaque carte à un nombre et ainsi faciliter la sélection de la carte à faire
sauter. Pour cela, nous avons réaliser la fonction "afficher_reussite_num". Elle prends pour argument la liste de cartes à afficher, ne revoie rien et a
pour effet de bord l'affichage détaillé de la réussite. Cette fonction consiste en 3 boucles affichant respectivement les cartes de la réussite, les
accents circonflexes permetants de souligner les cartes, et les nombres désignants les cartes. A noter que bien que semblant être des index, ces nombres
n'en sont pas tout à fait car: soit une liste li, u l'index d'un élément de cette liste et v un des nombres utilisés dans la fonction , alors:
	
	u (compris) [0;(len(li)-1)] (équivalent) [0;len(li)[
	v (compris) [1;len(li)]
		
	Lors de la création de cette fonction, nous avons constater des bugs survenant lors de l'affichage de grandes listes de cartes comme par exemple
une pioche entière d'un jeu de 52 cartes. A raison de 4 caractères imprimés par carte (les 3 caractères de la carte + l'espace de fin du print),
l'affichage entier d'un jeu de 52 cartes correspond à l'impression de 4x52=208 caractères. Cela peut être un problème si l'utilisateur possède un petit
écran et par conséquent un petit terminal. Les trois lignes de 208 caractères peuvent "déborder" chacune leur tour, provoquant des bugs similaires à 
celui-ci:

			========================================== Capture d'écran du bug =========================================
			(légende: bug d'affichage relatif à la fonction "afficher_reussite_num" telle qu'écrite au commit 7281444c)*	              

	Nous avons résolu ce problème en imbriquant les trois boucles d'affichage dans une plus grande boucle, et en changeant la condition de la première
boucle. Maintenant, la première boucle conditionne les deux suivantes puisqu'elles sont des boucles "for" tournant sur une liste (li_dix) ayant un nombre 
d'éléments équivalent au nombre de passage dans la première boucle. Cette boucle s'arrête soit lorsqu'il n'y a plus de cartes dans la liste, soit si
l'affichage dépasse la taille du terminal. Le compteur "y" est incrémenté à chaque passage dans la boucle, c'est à dire à chaque impression de carte. Il
perment donc de savoir où nous en sommes dans la lecture/impression de la réussite et par conséquent, poser une condition de sortie de boucle lorsque qu'on
arrive au bout de la liste de cartes. Le compteur "i" qui est incrémenté lui aussi à chaque impréssion mais ré-initialisé à chaque passage dans la grande 
boucle (ce qui reviens à une ré-initialisation à la sortie de la "petite" boucle). Donc, multiplié par 4, il permet de compter le nombre de caractères 
imprimés à chaque passage de grande boucle. Il faut maintenant connaître la largeur du terminal pour pouvoir la comparer à "i". Pour obtenir la taille du 
terminal, nous avons utilisé le module intégré à python: "shutil". Avec la fonction "get_terminal_size", on peut obtenir le nombre de caractères que peut 
contenir le terminal en longueur. Ainsi, nous pouvons construire la deuxième condition de sortie de boucle en spécifiant que la boncle est valide tant que
i (times) 4 est inférieur ou égal à la largeur du terminal. Après modifications, la fonction est donc comme suit:

				===================== Code de la fonction "afficher_reussite_num" (l.24) =====================

*mettre dans les annexes le code de la fonction "afficher_reussite_num" @7281444c

II) Les Extensions: ajouts de fonctionnalités.
a) Verification de la pioche

	Parmis les idées d'extensions que propose le sujet, nous avons choisi la fonction permettant de verifier que la pioche de cartes ne soit pas truquée.
Nommée "vérifier_pioche", elle prends en arguments la liste que l'on souhaite vérifier ainsi que le nombre de cartes qu'elle contient - ou tout du moins 
qu'elle est censée contenir ! Elle n'a pas d'effets de bord et renvoie un booléen pour statuer de la conformité de la pioche: True si la pioche est conforme
et False si la pioche est truquée. Notre algorithme se base sur la comparaison de la liste passée en argument avec une liste conforme. Une pioche peut être 
truquée de différentes manières:- on peut ajouter les cartes que l'on souhaite directement dans la liste, auquel cas la taille de la liste doit être trop grande.
				- on peut sinon placer les cartes que l'on souhaite à l'index d'une autre carte. On remplace donc une carte par une autre, ce qui
				reviens à réécrire les cartes pour qu'elles nous arrangent. Il faudra donc veiller à ce qu'il n'y est pas de double. Pour cela,
				et comme nous savons que la taille de la liste sera contôlé ensuite, il nous suffit juste de veiller à ce que toutes les cartes
				présentes dans une pioche conventionnelle le soit aussi dans la pioche que l'on contôle. Ainsi, s'il y a des doubles, cette
				dernière sera forcement d'une taille non conforme.
	Nous avons donc fait appel à notre fonction "init_pioche_alea" crée lors de la partie guidée qui permet de générer une pioche de 32 ou 52 cartes mélangées
aléatoirement. Cette pioche nous sert donc de comparaison. Nous passons tout d'abord en revue la pioche suspecte en veillant à ce que chaque carte de la pioche
conforme soit dans la pioche suspecte. Si ce n'est pas le cas, la fonction renvoie False. La fonction procède ensuite à une vérification de la longueur de la
pioche suspecte. Pareil, si la pioche a plus de cartes qu'elle ne devrait en avoir, la fonction renvoie False. Si la pioche possède toutes les cartes de la pioche
conforme tout en ayant le bon nombre de cartes, alors la fonction renvoie True.

c) Probabilités