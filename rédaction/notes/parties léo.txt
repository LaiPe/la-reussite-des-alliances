I) La reussite des alliances: structuration du jeu
b) Créations des fonctions

	Pour représenter informatiquement le jeu de la réussite des alliances, nous avions à notre disposition une partie guidée intégrée au sujet.
Ce "cahier des charges" détaillé nous a fourni un certain confort quant à l'architecture du programme en lui même. En effet, comme les entrées, 
sorties et effets de bords de nos fonctions nous étaient déjà indiqué, nous n'avions pas à réflechir à comment nos fonctions allaient intéragir entre
elles. Les appels à des fonctions entérieures, s'il en avait, nous étaient eux aussi indiqués ou tout du moins suggérés. Cette souplesse de travail nous
a permis de nous concentrer sur l'algorithmie de nos fonctions et comment optimiser ces dernières.
	Néanmoins, le sujet nous permettait également de prendre certaines libertés. Par exemple, il nous était suggéré de réaliser des fonctions
auxiliaires pour programmer la fonction "une_etape_reussite". C'est ce que nous avons fait avec la fonction "piocher" qui compartimente l'action de 
piocher une carte. Elle prends en argument deux listes, une qui représente la liste des tas de la réussite, l'autre qui représente la pioche. Elle a 
pour effet de bord de déplacer la première carte de la pioche (c'est à dire d'indice 0) au dernier emplacement de la liste des tas. Pour cela, nous 
avons utilisé la fonction "pop" qui a elle même pour effet de bord de supprimer un élément d'une liste à un index précis et qui retourne cet élément.
Nous avons donc redirigé la sortie de la fonction "pop" comme ceci:

					===================== Code de la fonction "piocher" (l.121) =====================
 
Nous n'avons cependant pas jugé nécéssaire de faire d'autres compartimentations pour fluidifier cette fonction.
	La fonction "reussite_mode_manuel" nous a permis à nouveau de pouvoir prendre des libertés cette fois-ci quant à l'affichage des éléments et
plus globalement l'interface utilisateur. Pour rappel, cette fonction a pour but de laisser l'utilisateur jouer une partie. Ceci néséssite une interface
pour que l'utilisateur puisse choisir ce qu'il veut faire. Ainsi, afin de présenter au mieux ses options de jeu à l'utilisateur, nous avons réaliser un
menu contenant un choix pour piocher, un choix pour réaliser un saut et un choix pour mettre fin à la partie. En plus de ce menu, nous avons décider de
réaliser un affichage de la réussite plus poussé permettant de relier chaque carte à un nombre et ainsi faciliter la sélection de la carte à faire
sauter. Pour cela, nous avons réaliser la fonction "afficher_reussite_num". Elle prends pour argument la liste de cartes à afficher, ne revoie rien et a
pour effet de bord l'affichage détaillé de la réussite. Cette fonction consiste en 3 boucles affichant respectivement les cartes de la réussite, les
accents circonflexes permetants de souligner les cartes, et les nombres désignants les cartes. A noter que bien que semblant être des index, ces nombres
n'en sont pas tout à fait car: soit une liste li, u l'index d'un élément de cette liste et v un des nombres utilisés dans la fonction , alors:
	
	u (compris) [0;(len(li)-1)] (équivalent) [0;len(li)[
	v (compris) [1;len(li)]
		
	Lors de la création de cette fonction, nous avons constater des bugs survenant lors de l'affichage de grandes listes de cartes comme par exemple
une pioche entière d'un jeu de 52 cartes. A raison de 4 caractères imprimés par carte (les 3 caractères de la carte + l'espace de fin du print),
l'affichage entier d'un jeu de 52 cartes correspond à l'impression de 4x52=208 caractères. Cela peut être un problème si l'utilisateur possède un petit
écran et par conséquent un petit terminal. Les trois lignes de 208 caractères peuvent "déborder" chacune leur tour, provoquant des bugs similaires à 
celui-ci:

			========================================== Capture d'écran du bug =========================================
			(légende: bug d'affichage relatif à la fonction "afficher_reussite_num" telle qu'écrite au commit 7281444c)*	              

	Nous avons résolu ce problème en imbriquant les trois boucles d'affichage dans une plus grande boucle, et en changeant la condition de la première
boucle. Maintenant, la première boucle conditionne les deux suivantes puisqu'elles sont des boucles "for" tournant sur une liste (li_dix) ayant un nombre 
d'éléments équivalent au nombre de passage dans la première boucle. Cette boucle s'arrête soit lorsqu'il n'y a plus de cartes dans la liste, soit si
l'affichage dépasse la taille du terminal. Le compteur "y" est incrémenté à chaque passage dans la boucle, c'est à dire à chaque impression de carte. Il
perment donc de savoir où nous en sommes dans la lecture/impression de la réussite et par conséquent, poser une condition de sortie de boucle lorsque qu'on
arrive au bout de la liste de cartes. Le compteur "i" qui est incrémenté lui aussi à chaque impréssion mais ré-initialisé à chaque passage dans la grande 
boucle (ce qui reviens à une ré-initialisation à la sortie de la "petite" boucle). Donc, multiplié par 4, il permet de compter le nombre de caractères 
imprimés à chaque passage de grande boucle. Il faut maintenant connaître la largeur du terminal pour pouvoir la comparer à "i". Pour obtenir la taille du 
terminal, nous avons utilisé le module intégré à python: "shutil". Avec la fonction "get_terminal_size", on peut obtenir le nombre de caractères que peut 
contenir le terminal en longueur. Ainsi, nous pouvons construire la deuxième condition de sortie de boucle en spécifiant que la boncle est valide tant que
i (times) 4 est inférieur ou égal à la largeur du terminal. Après modifications, la fonction est donc comme suit:

				===================== Code de la fonction "afficher_reussite_num" (l.24) =====================

*mettre dans les annexes le code de la fonction "afficher_reussite_num" @7281444c

II) Les Extensions: ajouts de fonctionnalités.
a) Verification de la pioche

	Parmis les idées d'extensions que propose le sujet, nous avons choisi la fonction permettant de verifier que la pioche de cartes ne soit pas truquée.
Nommée "vérifier_pioche", elle prends en arguments la liste que l'on souhaite vérifier ainsi que le nombre de cartes qu'elle contient - ou tout du moins 
qu'elle est censée contenir ! Elle n'a pas d'effets de bord et renvoie un booléen pour statuer de la conformité de la pioche: True si la pioche est conforme
et False si la pioche est truquée. Notre algorithme se base sur la comparaison de la liste passée en argument avec une liste conforme. Une pioche peut être 
truquée de différentes manières:- on peut ajouter les cartes que l'on souhaite directement dans la liste, auquel cas la taille de la liste doit être trop grande.
				- on peut sinon placer les cartes que l'on souhaite à l'index d'une autre carte. On remplace donc une carte par une autre, ce qui
				reviens à réécrire les cartes pour qu'elles nous arrangent. Il faudra donc veiller à ce qu'il n'y est pas de double. Pour cela,
				et comme nous savons que la taille de la liste sera contôlé ensuite, il nous suffit juste de veiller à ce que toutes les cartes
				présentes dans une pioche conventionnelle le soit aussi dans la pioche que l'on contôle. Ainsi, s'il y a des doubles, cette
				dernière sera forcement d'une taille non conforme.
	Nous avons donc fait appel à notre fonction "init_pioche_alea" crée lors de la partie guidée qui permet de générer une pioche de 32 ou 52 cartes mélangées
aléatoirement. Cette pioche nous sert donc de comparaison. Nous passons tout d'abord en revue la pioche suspecte en veillant à ce que chaque carte de la pioche
conforme soit dans la pioche suspecte. Si ce n'est pas le cas, la fonction renvoie False. La fonction procède ensuite à une vérification de la longueur de la
pioche suspecte. Pareil, si la pioche a plus de cartes qu'elle ne devrait en avoir, la fonction renvoie False. Si la pioche possède toutes les cartes de la pioche
conforme tout en ayant le bon nombre de cartes, alors la fonction renvoie True.

c) Probabilités

	Pour finaliser nos exensions, nous avons décider de completer notre partie "Statistiques" avec une partie "Probabilités". Nous avons réaliser dans un 
premier temps la fonction "proba" qui nous permet de calculer les pourcentages de réussite en fonction du nombre de tas de cartes maximum pour gagner. Cette fonction
ne prends comme argument optionnel que le nombre de cartes présentes dans le jeu (32 ou 52), n'a pas d'effets de bord et retourne une liste contenant les pourcentages 
de réussite triés par ordre croissant du nombre palier de réussite. L'appel à la fonction précédement présentée "res_multi_simulation" constitue la base de notre
algorithme. Pour rappel, elle permet d'obtenir une liste d'entiers corespondants aux nombres de tas restant respectivement à la fin de chaque réussite simmulé.
Donc, si nous réalisons cent simulations, nous pouvons compter combien respectent le palier de réussite et donc établir un pourcentage de victoire avec tel palier 
de réussite.
	Ainsi, une boucle "for" se charge de vérifier si chaque valeur de la liste est inférieure ou égale au nombre palier. Si oui, une variable "prctage" 
correspondante au pourcentage est incrémentée. Au bout des cent passages de boucle, la valeur de cette variable est ajoutée à la liste de retour puis est remise à 
zéro. Cette remise à zéro permet l'itération des étapes décrites dans une grande boucle "while" ayant pour condition de sortie qu'un compteur soit supérieur au nombre 
de cartes du jeu. Ce compteur se nomme "i" et représente le nombre palier pour la réussite. Ainsi, en l'incrémentant à la fin de chaque passage dans sa boucle on peut
établir le pourcentage de réussite pour les différentes valeurs de palier. Nous pouvons représenter notre fonction comme suit:
	Soit i le compteur du même nom, y le compteur permettant de parcourir la liste retouné par "res_multi_simulation"*, li la liste que retourne "proba", et c
le nombre de cartes du jeu** (32 ou 52), alors:

				===========================================envoyé sur discord==============================================

	Nous disposons maintenant de pourcentages décrivant les probabilités de réussite des alliances en fonction d'un certain nombre de tas restant à la fin 
de la partie. Nous avons crée une seconde fonction nommée "affiche_proba" afin de représenter graphiquement les probabilités de victoire. Comme la fonction "proba",
"affiche_proba" a pour seul argument un entier indicant le nombre de cartes présentes dans le jeu. Cependant, elle ne renvoie rien et a pour effet de bord l'affichage
du graphique. Nous avons fait appel dans un premier temps à notre fonction "proba" afin de remplir notre axe des ordonnées. Les valeurs en abcisses sont générer par une boucle
"for". Nous pouvons exprimer x et y, respectivement pour les abcisses et les ordonnées comme ceci, avec c le nombre de cartes du jeu:

	x (appartient) [2;c] 
	y (appartient) [0;100]

Pour l'affichage, nous avons fait appel au module python "matplotlib.pyplot" donnant accès à de nombreuses fonctions d'affichage graphique. Pour notre part, nous avons
dans un premier temps utilisé la fonction "plot" permetant de créer le graphique en lui passant en agrument les listes représentant les différents axes du graphique.
Pour rendre le graphique plus compréhensible, nous avons également utilisé les fonctions "xlabel" et "ylabel" permettant de donner un titre aux abcisses et aux
ordonées. Pour finir, afin d'afficher le graphique, nous avons utilisé la fonction "show".

* y n'est pas présent dans le code mais est algorithmiquement sous-entendu par la boucle "for".
**c est représenté par l'argument optionnel "nb_cartes" dans le code de "proba".

III) Le debug_mode
a) Structure du programme
	Notre débug_mode se présente donc comme un répertoire de l'ensemble de nos fonctions. Il permet d'y faire appel via une interface prennant en charge le choix
des arguments (listes, entiers, chaines de caractères). Il prends également en compte un gestion des fichiers de sauvegardes. 
	Les fonctions sont présentées dans un menu à choix multiples et rangées par rubriques. Par exemple, les fonctions d'affichage sont rangées dans le premier 
choix du menu: "1.Fonctions d'affichage". Un sous-menu s'affiche alors pour séléctionner la fonction dans sa rubrique. L'utilisateur peut à tout moment revenir au menu
principal avec le choix "r.Retour" et quitter le programme avec le choix présent dans le menu principal "q.Fermer debug_mode".
	 Des variables sont également incluses dans le programme. Elles permettent de sauvegarder pendant la durée de l'utilisation du programme des cartes, des listes
de cartes, etc ... Nous avons implémenté dans notre programme:
		-4 listes : "liCartes", "liCartes2", "liCartes3" et "liFichier"
		-2 dictionnaires : "carte1" et "carte2"
		-une chaîne de caractères : "car"
		-un entier (négligeable) : "entier"
Les listes servent de listes de cartes, c'est à dire de listes de dictionnaires, sauf liFichier dont la fonction sera détaillé ci-dessous. Les dictionnaires 
représentent des cartes conforme à celles que le sujet demmande. 
Ces variables peuvent être utilisées à la guise de l'utilisateur via les différentes fonctions. Le menu principal est accompagné d'un tableau affichant les valeurs des 
différentes variables. Pour éclaircir notre code, nous avons compartimenté l'affichage de ce tableau dans la fonction "tabVar". Elle ne prends par conséquent aucun
agument ni ne renvoie rien. Cette fonction fait d'abord appel à la fonction "texte_encadre" qui permet d'entourer un texte avec des '=' pour le mettre en valeur.
Nous affichons donc le titre du tableau puis ensuite les differentes variables avec leurs valeurs. Comme le tableau s'affiche en même temps que le menu, si une variable
viens à être modifié par une fonction, sa valeur mise à jour sera affiché dans le tableau à la fin de l'appel de la fonction.
	Lorsqu'une fonction est sélectionné dans le menu, les variables doivent être sélectionnées avant que l'appel à la fonction ne soit fait. La fonction "choixVar"
permet d'afficher à l'utilisateur les variables pour qu'il puisse en choisir une. Elle prends comme argument une chaine de caractère représentant le type de variable
que l'utilisateur doit choisir. Ainsi, si l'utilisateur veut réaliser un appel à la fonction "carte_to_chaine", prenant pour unique argument un dictionnaire, le
programme principal de debug_mode fera appel à sa fonction choixVar avec en argument la chaîne de crarctère "c" (pour carte). Un menu s'ouvrira pour que l'utilisateur
puisse choisir entre "carte1" et "carte2". Un appel à la fonction "carte_to_chaîne" sera ensuite réalisé dans le programme principal avec pour argument un des deux
dictionnaires choisi.

b) Gestion des fichiers
	Certaines fonctions peuvent cependant prendre comme argument des noms de fichiers, nous avons donc mis en place une gestion dynamique des fichiers présents
dans le sous-répertoire "ressources" (cf. arbre) (//UTILISE UNE REF). La gestion des fichiers de notre programme s'articule autour de la fonction "choixFichier".
Cette dernière permet à l'utilisateur de choisir un fichier existant présent dans le dossier "ressources", ou bien d'en créer un nouveau si c'est nécéssaire. Elle ne
prends pas d'argument et retourne le nom du fichier choisi ou crée. Afin que la gestion des fichiers soit dynamique et que par exemple, un fichier crée avec cette
fonction puisse par la suite être sélectionné par cette même fonction, nous avons crée une liste "liFichier" qui répertorie l'ensemble des fichiers consultables.
La fonction "choixFichier" consiste donc à lire ou modifier la liste "liFichier" ou fonction de ce que l'utilisateur choisi. Elle a donc comme effet de bord la
modification de la variable "liFichier". Or cette variable est définie dans le programme principal, une fonction peut consulter mais pas modifier une variable
issue du porgramme principal. Pour pallier ce problème, nous avons utilisé le mot-clé "global" qui permet de définir une variable comme globale, c'est à dire
modifiable partout dans le programme. Plus précisément, nous avons déclaré "liFichier" comme étant globale mais dans la fonction "choixFichier". Cela reviens donc
à ce que "liFichier" soit globale uniquement pour la fonction "choixFichier", elle n'est ainsi pas réellement globale et ne peut pas être modifier par les autres
fonctions comme la nomination "globale" le voudrait.

(//UTILISER UN ENVIRONNEMENT EXEMPLE COMME JE L'AI FAIT POUR LA REDAC LATEX DE JANVIER)

Soit le programme suivant:

						============la-reussite-des-alliances\rédaction\exemple\globale.py==========

Le programme affiche "5", la fonction "modifBis" ne modifie pas la variable "oui". Elle n'est donc globale que pour la fonction "modif".
(// FIN DE L'EXEMPLE)
	
	Notre fonction "choixFichier" fait appel à plusieurs autres fonctions afin de compartimenter des actions spécifiques. La fonction "affich_liFichier" permet
l'affichage de la liste "liFichier" sous la forme d'un menu numéroté. En effet, cette fonction a été réalisé dans l'optique d'être appelé par "choixFichier" juste 
avant un input de l'utilisateur pour choisir un fichier existant. Elle n'a donc pas d'arguments ni de valeur de sortie et a pour effet de bord l'affichage. 
	L'autre fonction appelée par "choixFichier" permet la sauvegarde sur le long-terme de la modification de la liste "liFichier". Cette dernière possède une
sauvegarde de ses valeurs dans le fichier "liFich.csv". Ainsi, lorsque "liFichier" est modifiée par "choixFichier", la nouvelle version de "liFichier" est écrite
dans "liFich.csv". Afin que cette sauvegarde soit persistante lors des redémarages du debug_mode, la fonction "init_liFichier" est appelé lors de l'initialisation
de la vaiable "liFichier" par le programme principal. Elle ne possède pas d'arguments, ne réalise pas d'effets de bords et renvoie une liste correspondante à 
"liFichier". Elle permet la lecture du fichier "liFich.csv" pour collecter tout les nom de fichiers présents dans le dossier "ressources" et les envoyés sous forme
d'une liste. 


	