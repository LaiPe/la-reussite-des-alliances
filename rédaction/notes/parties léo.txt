I) La reussite des alliances: structuration du jeu
b) Créations des fonctions

	Pour représenter informatiquement le jeu de la réussite des alliances, nous avions à notre disposition une partie guidée intégrée au sujet.
Ce "cahier des charges" détaillé nous a fourni un certain confort quant à l'architecture du programme en lui même. En effet, comme les entrées, 
sorties et effets de bords de nos fonctions nous étaient déjà indiqué, nous n'avions pas à réflechir à comment nos fonctions allaient intéragir entre
elles. Les appels à des fonctions entérieures, s'il en avait, nous étaient eux aussi indiqués ou tout du moins suggérés. Cette souplesse de travail nous
a permis de nous concentrer sur l'algorithmie de nos fonctions et comment optimiser ces dernières.
	Néanmoins, le sujet nous permettait également de prendre certaines libertés. Par exemple, il nous était suggéré de réaliser des fonctions
auxiliaires pour programmer la fonction "une_etape_reussite". C'est ce que nous avons fait avec la fonction "piocher" qui compartimente l'action de 
piocher une carte. Elle prends en argument deux listes, une qui représente la liste des tas de la réussite, l'autre qui représente la pioche. Elle a 
pour effet de bord de déplacer la première carte de la pioche (c'est à dire d'indice 0) au dernier emplacement de la liste des tas. Pour cela, nous 
avons utilisé la fonction "pop" qui a elle même pour effet de bord de supprimer un élément d'une liste à un index précis et qui retourne cet élément.
Nous avons donc redirigé la sortie de la fonction "pop" comme ceci:

					===================== Code de la fonction "piocher" (l.121) =====================
 
Nous n'avons cependant pas jugé nécéssaire de faire d'autres compartimentations pour fluidifier cette fonction.
	La fonction "reussite_mode_manuel" nous a permis à nouveau de pouvoir prendre des libertés cette fois-ci quant à l'affichage des éléments et
plus globalement l'interface utilisateur. Pour rappel, cette fonction a pour but de laisser l'utilisateur jouer une partie. Ceci néséssite une interface
pour que l'utilisateur puisse choisir ce qu'il veut faire. Ainsi, afin de présenter au mieux ses options de jeu à l'utilisateur, nous avons réaliser un
menu contenant un choix pour piocher, un choix pour réaliser un saut et un choix pour mettre fin à la partie. En plus de ce menu, nous avons décider de
réaliser un affichage de la réussite plus poussé permettant de relier chaque carte à un nombre et ainsi faciliter la sélection de la carte à faire
sauter. Pour cela, nous avons réaliser la fonction "afficher_reussite_num". Elle prends pour argument la liste de cartes à afficher, ne revoie rien et a
pour effet de bord l'affichage détaillé de la réussite. Cette fonction consiste en 3 boucles affichant respectivement les cartes de la réussite, les
accents circonflexes permetants de souligner les cartes, et les nombres désignants les cartes. A noter que bien que semblant être des index, ces nombres
n'en sont pas tout à fait car: soit une liste li, i l'index d'un élément de cette liste et y les nombres utilisés dans la fonction , alors:
	
	i (compris) [0;(len(li)-1)] (équivalent) [0;len(li)[
	y (compris) [1;len(li)]
		
	Lors de la création de cette fonction, nous avons constater des bugs survenant lors de l'affichage de grandes listes de cartes comme par exemple
une pioche entière d'un jeu de 52 cartes. A raison de 4 caractères imprimés par carte (les 3 caractères de la carte + l'espace de fin du print),
l'affichage entier d'un jeu de 52 cartes correspond à l'impression de 4x52=208 caractères. Cela peut être un problème si l'utilisateur possède un petit
écran et par conséquent un petit terminal. Les trois lignes de 208 caractères peuvent "déborder" chacune leur tour, provoquant des bugs similaires à 
celui-ci:

			========================================== Capture d'écran du bug =========================================
			(légende: bug d'affichage relatif à la fonction "afficher_reussite_num" telle qu'écrite au commit 7281444c)*	              

Nous avons résolu ce bug en blablabla








*mettre dans les annexes le code de la fonction "afficher_reussite_num" à ce commit